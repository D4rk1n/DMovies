{"version":3,"sources":["config/firebaseConfig.js","utility/movies.js","components/counter.js","components/movies.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","database","firestore","a","console","log","collection","get","movies","docs","map","doc","data","ID","id","Counter","handleIncrement","props","increment","handleDecrement","decrement","classes","this","stock","className","role","onClick","Component","MoviesList","handleDelete","movie","state","filter","m","setState","i","findIndex","numberInStock","title","genre","name","publishYear","getMovies","then","snapShot","scope","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ece3f9d.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/analytics'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB4pJ9L7jrC3ERbs1pUyVU2AozRT5sOULM\",\r\n    authDomain: \"dmovies-f5a22.firebaseapp.com\",\r\n    databaseURL: \"https://dmovies-f5a22.firebaseio.com\",\r\n    projectId: \"dmovies-f5a22\",\r\n    storageBucket: \"dmovies-f5a22.appspot.com\",\r\n    messagingSenderId: \"992046942238\",\r\n    appId: \"1:992046942238:web:a36972f4834bc59590c60f\",\r\n    measurementId: \"G-3HQ12XX7S8\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n  const database = firebase.firestore();\r\n  export default database;","import database from \"../config/firebaseConfig\";\r\n\r\nexport async function getMovies(){\r\n    console.log(\"yo\");\r\n      let  movies = await database.collection('movies-list').get();\r\n      return movies.docs.map(doc=>({ ...doc.data(),ID:doc.id }));\r\n    \r\n}\r\n\r\nexport async function findMovie(id){\r\n      let  movie = await database.collection('movies-list').doc(id).get();\r\n      console.log(movie.data());\r\n}","import React, { Component } from 'react'\r\n\r\nexport class Counter extends Component {\r\n    handleIncrement =  ()=> {\r\n        this.props.increment(this.props.id);\r\n    }\r\n    handleDecrement =  ()=> {\r\n        this.props.decrement(this.props.id);\r\n        \r\n\r\n    }\r\n    render() {\r\n        let classes = \"badge badge-\"\r\n        classes += (this.props.stock) ? \"light\" : \"danger\";\r\n        return (\r\n            <div>\r\n                \r\n                \r\n                <div className=\"btn-group \" role=\"group\">\r\n                <button onClick={this.handleIncrement} className=\"btn btn-primary btn-sm \">\r\n                <span className={classes}>{this.props.stock}</span>   +\r\n                    </button>\r\n                <button onClick={this.handleDecrement} className=\"btn btn-warning btn-sm\">-</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React, { Component } from 'react'\r\nimport {getMovies} from '../utility/movies';\r\nimport Counter from './counter'\r\nexport class MoviesList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            movies: [{title:\"\",genre:{name:\"\"},publishYear:\"\",numberInStock:\"\"}]\r\n        }\r\n        this.movies = getMovies().then(snapShot=>{\r\n           this.setState({movies : snapShot});\r\n        })\r\n    }\r\n    \r\n    handleDelete =(movie)=> {\r\n        console.log(movie);\r\n        const movies = this.state.movies.filter(m=>m.ID!==movie.ID);\r\n        this.setState({movies});\r\n     }\r\n     handleIncrement =  (id)=> {\r\n        let movies = this.state.movies;\r\n        var i = movies.findIndex(m => m.ID === id);\r\n        movies[i].numberInStock++;\r\n        this.setState({movies})\r\n    }\r\n    handleDecrement =  (id)=> {\r\n        let movies = this.state.movies;\r\n        var i = movies.findIndex(m => m.ID === id);\r\n        if(movies[i].numberInStock)\r\n            {movies[i].numberInStock--;\r\n            this.setState({movies})}\r\n    }  \r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <table className=\"table table-dark table-hover mx-auto\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\" className=\"text-left\">Title</th>\r\n                    <th scope=\"col\">Genre</th>\r\n                    <th scope=\"col\">Publish Year</th>\r\n                    <th scope=\"col\">In Stock</th>\r\n                    <th scope=\"col\"></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.state.movies.map(movie=> (\r\n                        <tr  key={movie.ID} className={(movie.numberInStock) ? \"\" : \"table-danger\"}>\r\n                            <th scope=\"row\" className=\"text-left\">{movie.title}</th>\r\n                            <td>{movie.genre.name}</td>\r\n                            <td>{movie.publishYear}</td>\r\n                            <td><Counter id ={movie.ID} stock ={movie.numberInStock} increment ={this.handleIncrement} decrement ={this.handleDecrement}/></td>\r\n                            <td><button onClick={()=>(this.handleDelete(movie))} className=\"btn btn-danger btn-sm\">Delete</button></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoviesList\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MoviesList from \"./components/movies\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <MoviesList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  'bootstrap/dist/css/bootstrap.css'\nimport  'font-awesome/css/font-awesome.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}