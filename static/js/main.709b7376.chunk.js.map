{"version":3,"sources":["config/firebaseConfig.js","utility/movies.js","components/counter.jsx","components/movieinput.jsx","components/movies.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","database","firestore","getMovies","a","collection","orderBy","get","movies","docs","map","doc","data","ID","id","delete","movie","add","then","querySnapshot","clearBatch","batch","forEach","ref","commit","console","log","addBatch","q","set","Counter","handleIncrement","props","increment","handleDecrement","decrement","classes","this","stock","className","role","onClick","Component","MovieInput","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","re","test","state","numberInStock","publishYear","title","genre","handleAddMovie","alert","onSubmit","type","placeholder","onChange","required","MoviesList","handleDelete","deleteMovie","filter","m","i","findIndex","foundMovie","length","addMovie","snapShot","push","clear","reset","Fragment","scope","handleReset","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.709b7376.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/analytics'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB4pJ9L7jrC3ERbs1pUyVU2AozRT5sOULM\",\r\n    authDomain: \"dmovies-f5a22.firebaseapp.com\",\r\n    databaseURL: \"https://dmovies-f5a22.firebaseio.com\",\r\n    projectId: \"dmovies-f5a22\",\r\n    storageBucket: \"dmovies-f5a22.appspot.com\",\r\n    messagingSenderId: \"992046942238\",\r\n    appId: \"1:992046942238:web:a36972f4834bc59590c60f\",\r\n    measurementId: \"G-3HQ12XX7S8\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n  const database = firebase.firestore();\r\n  export default database;","import database from \"../config/firebaseConfig\";\r\n\r\nexport async function getMovies(){\r\n      let  movies = await database.collection('movies-list').orderBy('title').get();\r\n      return movies.docs.map(doc=>({ ...doc.data(),ID:doc.id }));\r\n    \r\n}\r\n\r\nexport async function findMovie(id){\r\n      let  movie = await database.collection('movies-list').doc(id).get();\r\n} \r\nexport async function deleteMovie(id){\r\n      return await database.collection('movies-list').doc(id).delete();\r\n      \r\n} \r\nexport async function addMovie(movie)\r\n{\r\n      return database.collection('movies-list').add(movie);\r\n}\r\n\r\nexport async function clear()\r\n{\r\n      return await database.collection('movies-list').get().then(async function(querySnapshot) {\r\n            var clearBatch = database.batch();\r\n            \r\n            querySnapshot.forEach(function(doc) {\r\n                  clearBatch.delete(doc.ref);\r\n            });\r\n             clearBatch.commit();  \r\n      })\r\n}\r\n\r\nexport async function reset(){\r\n      console.log(\"cleared\");\r\n      let addBatch = database.batch();\r\n      return await database.collection(\"movies\").get().then( async(querySnapshot)=>\r\n      {     \r\n            querySnapshot.docs.forEach((q=>{\r\n                  var id = database.collection(\"movies-list\").doc();\r\n                  addBatch.set(id,q.data());         \r\n                  }))\r\n            addBatch.commit();\r\n                  })\r\n\r\n}\r\n   ","import React, { Component } from 'react'\r\n\r\nexport class Counter extends Component {\r\n    handleIncrement =  ()=> {\r\n        this.props.increment(this.props.id);\r\n    }\r\n    handleDecrement =  ()=> {\r\n        this.props.decrement(this.props.id);\r\n        \r\n\r\n    }\r\n    render() {\r\n        let classes = \"badge badge-\"\r\n        classes += (this.props.stock) ? \"light\" : \"danger\";\r\n        return (\r\n            <div>\r\n                \r\n                \r\n                <div className=\"btn-group \" role=\"group\">\r\n                <button onClick={this.handleIncrement} className=\"btn btn-primary btn-sm \">\r\n                <span className={classes}>{this.props.stock}</span>   +\r\n                    </button>\r\n                <button onClick={this.handleDecrement} className=\"btn btn-warning btn-sm\">-</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter\r\n","import React, { Component } from 'react'\r\n\r\nexport class MovieInput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {title:\"\",publishYear:\"\",numberInStock:\"\",genre:\"\"};\r\n    }\r\n    handleChange =(e)=>{\r\n        this.setState({[e.target.name] : e.target.value})\r\n    }\r\n    handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        const re = /^[0-9\\b]+$/;\r\n        if(re.test(this.state.numberInStock) && re.test(this.state.publishYear) )\r\n        {\r\n            this.setState({title:\"\",publishYear:\"\",numberInStock:\"\",genre:\"\"});\r\n            this.props.handleAddMovie(this.state);\r\n        }\r\n        else{\r\n            alert(\"Not Valid Input\");\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"bg-light py-3 px-4\" id=\"footer\">\r\n            <form className=\"form-inline\" onSubmit={this.handleSubmit}>\r\n                <div id='float-left'>\r\n                    <input className=\"form-control mx-4 my-1\" value={this.state.title} type=\"text\" placeholder=\"Title\" name=\"title\" onChange={this.handleChange} required></input>\r\n                    <input className=\"form-control mx-4 my-1\" value={this.state.publishYear} type=\"text\" placeholder=\"Publish Year\" name=\"publishYear\" onChange={this.handleChange} required></input>\r\n                    <input className=\"form-control mx-4 my-1 \" value={this.state.numberInStock} type=\"text\" placeholder=\"In Stock\" name=\"numberInStock\" onChange={this.handleChange} required></input>\r\n                    <input className=\"form-control mx-4 my-1\" value={this.state.genre} type=\"text\" placeholder=\"Genre\" name=\"genre\" onChange={this.handleChange} required></input>\r\n                </div>\r\n            <button className=\"btn btn-primary my-2 my-sm-0\" id=\"float-right\" type=\"submit\">Add Movie</button>\r\n            </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieInput\r\n","import React, { Component } from 'react'\r\nimport {getMovies , findMovie , addMovie,deleteMovie,reset,clear} from '../utility/movies';\r\nimport Counter from './counter'\r\nimport MovieInput from './movieinput'\r\nexport class MoviesList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            movies: []\r\n        }\r\n        this.movies = getMovies().then(snapShot=>{\r\n           this.setState({movies : snapShot});\r\n        })\r\n    }\r\n    \r\n    handleDelete =(movie)=> {\r\n            deleteMovie(movie.ID).then(()=>{\r\n            const movies = this.state.movies.filter(m=>m.ID!==movie.ID);\r\n            this.setState({movies});\r\n        })\r\n     }\r\n     handleIncrement =  (id)=> {\r\n        let movies = this.state.movies;\r\n        var i = movies.findIndex(m => m.ID === id);\r\n        movies[i].numberInStock++;\r\n        this.setState({movies})\r\n    }\r\n    handleDecrement =  (id)=> {\r\n        let movies = this.state.movies;\r\n        var i = movies.findIndex(m => m.ID === id);\r\n        if(movies[i].numberInStock)\r\n            {movies[i].numberInStock--;\r\n            this.setState({movies})}\r\n    }  \r\n    handleAddMovie = (movie)=>{\r\n        let foundMovie =this.state.movies.filter(m=>(m.title===movie.title && m.publishYear===movie.publishYear ))\r\n        if(foundMovie.length)\r\n        {\r\n           this.handleIncrement(foundMovie[0].ID);\r\n        }\r\n        else{\r\n            addMovie(movie).then((snapShot)=>{\r\n                let movies = this.state.movies;\r\n                movies.push( {...movie,ID :snapShot.id});\r\n                this.setState({movies});\r\n            })\r\n            \r\n        }\r\n        \r\n    }\r\n    handleReset()\r\n    {\r\n        clear().then(()=>{\r\n            reset().then(()=>{\r\n                this.movies = getMovies().then(snapShot=>{\r\n                    console.log(\"Added\")\r\n                    this.setState({movies : snapShot});\r\n                     })\r\n            })\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div className=\"container\">\r\n                <table className=\"table table-hover mx-auto\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\" className=\"text-left\">Title</th>\r\n                    <th scope=\"col\">Genre</th>\r\n                    <th scope=\"col\">Publish Year</th>\r\n                    <th scope=\"col\">In Stock</th>\r\n                    <th scope=\"col\"><button onClick={()=>(this.handleReset())} className=\"btn btn-success btn-sm\">RESET</button></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.state.movies.map(movie=> (\r\n                        <tr  key={movie.ID} className={(movie.numberInStock) ? \"\" : \"table-danger\"}>\r\n                            <th scope=\"row\" className=\"text-left\">{movie.title}</th>\r\n                            <td>{movie.genre}</td>\r\n                            <td>{movie.publishYear}</td>\r\n                            <td><Counter id ={movie.ID} stock ={movie.numberInStock} increment ={this.handleIncrement} decrement ={this.handleDecrement}/></td>\r\n                            <td><button onClick={()=>(this.handleDelete(movie))} className=\"btn btn-danger btn-sm\">DELETE</button></td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n              <MovieInput handleAddMovie={this.handleAddMovie}/>\r\n              </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MoviesList\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MoviesList from \"./components/movies\";\nimport MovieInput from './components/movieinput';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"head text-center bg-primary\">\n           <div className=\" text-white display-1 py-auto \"> D-MOVIES </div>\n           <p className=\" subtext badge badge-sm badge-light text-primary\">BETA</p>\n        </div>\n       <MoviesList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  'bootstrap/dist/css/bootstrap.css'\nimport  'font-awesome/css/font-awesome.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}